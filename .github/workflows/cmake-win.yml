# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Windows Build and Test

on:
  push:
    branches: [ "devel", "master" ]
  pull_request:
    branches: [ "devel", "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo
  PKGNAME: DrumstickV2
  INSTALL_LOCATION: ${{github.workspace}}/DrumstickV2

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest
    strategy:
        fail-fast: false
        matrix:
          include:
            # { icon: 'â¬›', sys: mingw32 } # There are no 32 bit packages for Qt6 in msys2 anymore
            - { icon: 'ðŸŸ¦', sys: mingw64 }
            - { icon: 'ðŸŸ¨', sys: ucrt64  }
            - { icon: 'ðŸŸ§', sys: clang64 }
    name: ðŸš§${{ matrix.icon }} ${{ matrix.sys }}
    defaults:
      run:
        shell: msys2 {0}

    steps:
    - uses: actions/checkout@v4

    - name: '${{ matrix.icon }} Setup MSYS2'
      uses: msys2/setup-msys2@v2
      with:
        release: false
        msystem: ${{matrix.sys}}
        install: >-
          git
          make
        pacboy: >-
          toolchain:p
          cmake:p
          ninja:p
          fluidsynth:p
          qt6-base:p
          qt6-5compat:p
          qt6-tools:p

    - name: '${{ matrix.icon }} Configure CMake'
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_LOCATION}}

    - name: '${{ matrix.icon }} Build'
      # Build your program with the given configuration
      run: cmake --build build --config ${{env.BUILD_TYPE}}

    - name: '${{ matrix.icon }} Test'
      working-directory: build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        export PATH=$PWD/lib${PATH:+:}"$PATH"
        ctest -C ${{env.BUILD_TYPE}}

    - name: '${{ matrix.icon }} Install'
      # Build your program with the given configuration
      run: cmake --install build --config ${{env.BUILD_TYPE}}
